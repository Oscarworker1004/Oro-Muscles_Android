/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.methority.btbrowser2;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.io.File; 
import java.util.Scanner; 
import javax.swing.DefaultComboBoxModel;

//import apache.commons.io.FilenameUtils;

/**
 *
 * @author manfred
 */
public class TheHud extends javax.swing.JFrame {

    private String m_dataDir;
    private String m_exec;
    private String [] m_file;
    private int m_selected;
 
    private int m_count;
    /**
     * Creates new form TheHud
     */
    public TheHud() {
                
        m_count = 0;
        m_dataDir = "./";
        m_exec = new File(".").getAbsolutePath();
        
        m_selected = 0;
        
        m_file = new String[64];
        
        for (int i=0; i<m_file.length; i++)
            m_file[i] = new String();
        
        initComponents();
        
        //jTextField1.setText("Log messages");
        jCheckBox1.setSelected(false);
        
        String [] nix = new String[1];
        nix[0] = new String();
        nix[0] = "Please load data first";
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( nix );
        jComboBoxActive.setModel( model );
        
        //jSlider1.sc
    
    }

    public String DataDir() {
        return m_dataDir;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        PrintButton = new javax.swing.JButton();
        jButtonMult = new javax.swing.JButton();
        jComboBoxActive = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jCheckBox2 = new javax.swing.JCheckBox();
        CheckApplyAll = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jButton1.setText("Recompute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load single");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Snap to frame");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        PrintButton.setText("Print");
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });

        jButtonMult.setText("Load mult");
        jButtonMult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMultActionPerformed(evt);
            }
        });

        jComboBoxActive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxActiveActionPerformed(evt);
            }
        });

        jLabel1.setText("Active channel:");

        jSlider1.setMaximum(200);
        jSlider1.setValue(100);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jCheckBox2.setText("mag/x,y,z");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        CheckApplyAll.setText("Apply to all");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxActive, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(110, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonMult, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckApplyAll)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(PrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CheckApplyAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButtonMult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxActive, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(PrintButton)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //m_draw.SetText("Hellooooo");
        if (m_file[m_selected].equals("")) {
            JFileChooser chooser2 = new JFileChooser();
            chooser2.setMultiSelectionEnabled(false);
        
        
              
            chooser2.setCurrentDirectory(new File(m_dataDir));
            chooser2.setDialogTitle("Write to:");

            int userSelection = chooser2.showSaveDialog(new JFrame());
        
        
            if (userSelection != JFileChooser.APPROVE_OPTION) {
                return;
            }
        
        
            File fileToSave = chooser2.getSelectedFile();
        
            System.out.println("out: " + fileToSave.getAbsolutePath() + "\n");
            m_file[m_selected] = fileToSave.getAbsolutePath();
 
        }

        // Apply to all IS NOT the same as recompute all!!!
        if (CheckApplyAll.isSelected()) {
            int sel = m_draw.GetSelected();
            m_draw.Recompute(m_file[m_selected], -1);

            for (int i=0; i<m_count; i++) {
                m_draw.SetSelected(i);
                if (i != sel) {
                    System.out.println("Process: " + m_file[i]);
                    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    //m_draw.Recompute(m_file[i], -1);
                    m_draw.Recompute(m_file[i], sel);
                }
            }
            m_draw.SetSelected(sel);
        } else {
            m_draw.Recompute(m_file[m_selected], -1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
       
        chooser.setCurrentDirectory(new File(m_dataDir));
        chooser.setDialogTitle("Open analyzed master.txt file");
        
        chooser.showOpenDialog(new JFrame());
        File[] files = chooser.getSelectedFiles();
        
        System.out.print("Files returned: " + files.length + "\n");
  
        if (files.length > 0) {
            m_dataDir = files[0].getPath();
            //m_input = m_dataDir;
        } else {
            return;
        }

        m_draw.Read(files[0].getAbsolutePath());

        m_selected = 0;
        m_file[m_selected] = files[0].getAbsolutePath();

        String [] nix = new String[1];
        nix[0] = new String();
        nix[0] = m_file[0];
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( nix );
        jComboBoxActive.setModel( model );
 

        m_draw.SetSelected(0);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        // Load raw 
        
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
       
        chooser.setCurrentDirectory(new File(m_dataDir));
        chooser.setDialogTitle("Open master.txt file");
        
        chooser.showOpenDialog(new JFrame());
        File[] files = chooser.getSelectedFiles();
        
        System.out.print("Files returned: " + files.length + "\n");
  
        if (files.length > 0) {
            m_dataDir = files[0].getPath();
            //m_input = m_dataDir;
        } else {
            return;
        }

        /*
        JFileChooser chooser2 = new JFileChooser();
        chooser2.setMultiSelectionEnabled(false);
        
        
              
        chooser2.setCurrentDirectory(new File(m_dataDir));
        chooser2.setDialogTitle("Write to:");

        int userSelection = chooser2.showSaveDialog(new JFrame());
        
        
        if (userSelection != JFileChooser.APPROVE_OPTION) {
            return;
        
        }
        
        File fileToSave = chooser2.getSelectedFile();
        
        System.out.println("out: " + fileToSave.getAbsolutePath() + "\n");

        
        String fileName = fileToSave.getAbsolutePath();
*/
        
/*        try {
            Runtime r = Runtime.getRuntime();
            String ex = "./BTAnalyze -i " + files[0] + " -o " + fileName + " > tmp";
            //String ex = m_exec + "\\BTLAnalyze.exe -i " + files[0] + " -o " + fileName + " > tmp";
            System.out.println(ex);

            Process p = r.exec(ex);
            p.waitFor();

            Process p2 = r.exec("ls -l");
            p2.waitFor();
            
            System.out.println("Done, exit code: " + p.exitValue());
        } 
        
        catch(Exception e) {
        
        }*/

        String origName = files[0].getAbsolutePath();
        String fileName;
        
        if (origName.contains(".processed.txt"))
            fileName = origName;
        else
            fileName = files[0].getAbsolutePath() + ".processed.txt";

        m_draw.ReadRaw(files[0].getAbsolutePath(), fileName);
        m_selected = 0;
        m_file[0] = fileName;

        String [] nix = new String[1];
        nix[0] = new String();
        nix[0] = m_file[0];
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( nix );
        jComboBoxActive.setModel( model );

        m_draw.SetSelected(0);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        
        // Snap to
        if (jCheckBox1.isSelected())
            m_draw.Snap(1);
        else
            m_draw.Snap(0);
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed

        JFileChooser chooser2 = new JFileChooser();
        chooser2.setMultiSelectionEnabled(false);
        
        
              
        chooser2.setCurrentDirectory(new File(m_dataDir));
        chooser2.setDialogTitle("Write to:");

        int userSelection = chooser2.showSaveDialog(new JFrame());
        
        
        if (userSelection != JFileChooser.APPROVE_OPTION) {
            return;
        }
        
        
        File fileToSave = chooser2.getSelectedFile();
        
        System.out.println("out: " + fileToSave.getAbsolutePath() + "\n");
        String file = fileToSave.getAbsolutePath();
        
        if (!file.contains(".png"))
            file += ".png";

        m_draw.Print(file);
        // TODO add your handling code here:
    }//GEN-LAST:event_PrintButtonActionPerformed

    private void jButtonMultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMultActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
       
        chooser.setCurrentDirectory(new File(m_dataDir));
        chooser.setDialogTitle("Open multi-channel meta-file");
        
        int userSelection = chooser.showOpenDialog(new JFrame());

        if (userSelection != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File[] files = chooser.getSelectedFiles();
        
        File tmp;
       
        
        System.out.print("Files returned: " + files.length + "\n");
        String meta = files[0].getAbsolutePath();
  
        m_draw.SetMeta(meta);
        
        if (files.length > 0) {
            m_dataDir = files[0].getPath();
            //m_input = m_dataDir;
        } else {
            return;
        }

        //String baseUrl = FilenameUtils.getPath(m_file);
        String path = meta.substring(0, meta.lastIndexOf(File.separator));
        path += File.separator;

        
        try {
            File file = 
                new File(meta); 
            Scanner sc = new Scanner(file); 
  
            sc.nextLine();
            int count = 0;
            //System.out.println("Enter main");        
            String [] channel = new String[64];
            String [] fl = new String[64];
            String [] label = new String[64];
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                

                String[] split = line.split("\\s+");

                String str = split[0];
                
                if (str.equals(""))
                    continue;
                channel[count] = new String();
                label[count] = new String();
                channel[count] = path + str;
                fl[count] = str;
                
                if (split.length > 1) {
                    label[count] = split[1];
                }
                
                count++;
            }
            
            m_draw.SetMult(count, path);
            String [] nix = new String[count+1];
            m_count = count;
            for (int i=0; i<count; i++) {
                //m_draw.ReadRawMult(channel[i], channel[i] + ".processed.txt", i);
                File tempFile = new File(channel[i] + ".processed.txt");
                boolean exists = tempFile.exists();
                
                if (exists) {            
                    System.out.println("File exists, loading processed: " + channel[i] + ".processed.txt");  
                } else {
                    System.out.println("New file, processing: " + channel[i]);   
                    JNIWrap wrap = new JNIWrap();
                    String annot = channel[i] + ".processed.txt" + ".annot.txt";
                    wrap.callAnalysis(channel[i], channel[i] + ".processed.txt", "", "", "", "", annot, 4);
 
                }
                m_draw.ReadMult(channel[i] + ".processed.txt", i);
                nix[i] = fl[i];
                m_file[i] = channel[i] + ".processed.txt";
            }
            
            m_draw.SetSelected(0);
        
            nix[count] = "META Cycles";
            //nix[count + 1] = "All Channels";
            
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( nix );
            jComboBoxActive.setModel( model );

       }
       
        catch(Exception e) {
            System.out.println("EXCEPTION  HUD Multi-read!!!!");  
        }

        System.out.println("Done loading!");  
 
 
        //m_draw.Read(files[0].getAbsolutePath());


        
    }//GEN-LAST:event_jButtonMultActionPerformed

    private void jComboBoxActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxActiveActionPerformed
        int idx = jComboBoxActive.getSelectedIndex();
        System.out.println("Changed active channel to: " + idx); 
        m_draw.SetSelected(idx);
    }//GEN-LAST:event_jComboBoxActiveActionPerformed

    // Slider
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        
        double d = jSlider1.getValue()/100.;
        m_draw.SetMasterScale(d);
        
    }//GEN-LAST:event_jSlider1StateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        

        if (jCheckBox2.isSelected())
            m_draw.ShowMag(1);
        else
            m_draw.ShowMag(0);

    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private static LongDraw m_draw;
    
    public static void main(LongDraw d) {
        
        m_draw = d;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheHud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheHud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheHud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheHud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheHud().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckApplyAll;
    private javax.swing.JButton PrintButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonMult;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBoxActive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
